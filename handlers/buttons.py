from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from loader import dp
from states import City, Currency
from utils.misc import rate_limit
from apps import *
from keyboards import start_menu, from_currency_menu
from aiogram.types import InputFile
from data import config
from random import choice


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ @rate_limit(limit=2).
# –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ 5 - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã 5 —Å–µ–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–∞–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
# –°–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—É '–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã' –∏ –∑–∞–ø–∏—Å—ã–≤–∞–º –æ—Ç–≤–µ—Ç –≤ city_state
@rate_limit(limit=5)
@dp.message_handler(Text(equals=["–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã üå§", "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑!"]))
async def button_weather(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ")
    await City.city_state.set()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ —Ç–æ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é check_city_name —É–∑–Ω–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
@rate_limit(limit=5)
@dp.message_handler(state=City.city_state)
async def wait_city(message: types.Message, state: FSMContext):
    city_answer = message.text
    await state.update_data(city_state=city_answer)
    data = await state.get_data()
    city = data.get('city_state')
    if check_city_name(city):
        result = await check_weather(city)
        if result == 'Error':
            await message.reply(f'–ö–∞–∂–µ—Ç—Å—è —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. '
                                f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n{choice(random_names)}',
                                reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.reply(result, reply_markup=start_menu)
            await state.finish()
    else:
        await message.reply(f'–ì–æ—Ä–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n'
                            f'{choice(random_names)}', reply_markup=types.ReplyKeyboardRemove())


# –°–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—É '–∫–æ–Ω–≤–µ—Ä—Ç–æ—Ä –≤–∞–ª—é—Ç' –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@rate_limit(limit=5)
@dp.message_handler(text="–ö–æ–Ω–≤–µ—Ä—Ç–æ—Ä –≤–∞–ª—é—Ç üíµ")
async def button_exchange(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É", reply_markup=from_currency_menu)
    await Currency.from_currency_state.set()


# –ü—Ä–æ–≤–µ—Ä—è–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–º –ø–µ—Ä–≤—ã–π —Ç–∏–∫–µ—Ä –∏–∑ –ø–∞—Ä—ã –≤ from_currency_state, –¥–∞–ª–µ–µ —Å–ª—É—à–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç
@rate_limit(limit=5)
@dp.message_handler(state=Currency.from_currency_state)
async def from_currency_wait(message: types.Message, state: FSMContext):
    from_currency = message.text
    if check_valid_currency(from_currency):
        await state.update_data(from_currency_state=from_currency)
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
                             reply_markup=from_currency_menu)
        await Currency.to_currency_state.set()
    else:
        await message.reply(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É—é –≤–∞–ª—é—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞', reply_markup=from_currency_menu)


# –ü—Ä–æ–≤–µ—Ä—è–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–º –≤—Ç–æ—Ä–æ–π —Ç–∏–∫–µ—Ä –∏–∑ –ø–∞—Ä—ã –≤ to_currency_state, —Å–ª—É—à–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç
@rate_limit(limit=5)
@dp.message_handler(state=Currency.to_currency_state)
async def to_currency_wait(message: types.Message, state: FSMContext):
    to_currency = message.text
    if check_valid_currency(to_currency):
        await state.update_data(to_currency_state=to_currency)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª-–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 100.5', reply_markup=types.ReplyKeyboardRemove())
        await Currency.amount_state.set()
    else:
        await message.reply(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É—é –≤–∞–ª—é—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞', reply_markup=from_currency_menu)


# –ü—Ä–æ–≤–µ—Ä—è–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–º –∫–æ–ª-–≤–æ amount_state.
# –ï—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–æ, —Ç–æ –∏–ø—Å–æ–ª—å–∑—É–µ–º exchange_request, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
@rate_limit(limit=5)
@dp.message_handler(state=Currency.amount_state)
async def amount_wait(message: types.Message, state: FSMContext):
    amount = message.text
    if check_numeric(amount):
        await state.update_data(amount_state=amount)
        await message.reply(f'–°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –ø–æ—Å—á–∏—Ç–∞—Ç—å', reply_markup=types.ReplyKeyboardRemove())
        data = await state.get_data()
        from_currency = data.get('from_currency_state')
        to_currency = data.get('to_currency_state')
        amount = data.get('amount_state')
        result = await exchange_request(from_currency, to_currency, amount)
        if result == 'Error':
            await message.reply(f'–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ :( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ..', reply_markup=start_menu)
        else:
            await message.reply(result, reply_markup=start_menu)

        await state.finish()
    else:
        await message.reply(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 100.5',
                            reply_markup=types.ReplyKeyboardRemove())


# –°–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—É '–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ' –∏ –∏—Å–ø–æ–ª—å–∑—É—è get_random_image –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
@rate_limit(limit=5)
@dp.message_handler(text="–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ üê≥")
async def button_random_foto(message: types.Message):
    path_bytes = InputFile(path_or_bytesio=get_random_image())
    chat_id = message.from_user.id
    await dp.bot.send_photo(chat_id=chat_id, photo=path_bytes)


# –ò—Å–ø–æ–ª—å–∑—É—è get_random_poll –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —á–∞—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –≤ CHAT_ID
@rate_limit(limit=5)
@dp.message_handler(commands=['poll'])
async def create_poll(message: types.Message):
    poll = get_random_poll()
    await dp.bot.send_poll(chat_id=config.CHAT_ID, question=poll.question,
                           options=poll.options, is_anonymous=poll.is_anonymous)
